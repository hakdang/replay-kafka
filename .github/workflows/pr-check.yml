name: PR Check

# PR에 대한 빠른 검증
on:
  pull_request:
    branches: [ main, master, develop ]

jobs:
  quick-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Run tests
      run: ./gradlew test
      
    - name: Comment PR
      uses: actions/github-script@v6
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('🧪 Test Results')
          );
          
          const status = '${{ job.status }}';
          const emoji = status === 'success' ? '✅' : '❌';
          const message = `${emoji} **Tests ${status === 'success' ? 'passed' : 'failed'}**`;
          
          const body = `🧪 **Test Results**

${message}

- **Java Version**: 21
- **Status**: ${status}
- **Commit**: ${context.sha.substring(0, 7)}

${status === 'success' ? 
  '모든 테스트가 성공적으로 통과했습니다! 🎉' : 
  '일부 테스트가 실패했습니다. 자세한 내용은 Actions 탭을 확인해주세요.'
}`;

          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
