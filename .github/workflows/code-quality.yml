name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Check code compilation
      run: ./gradlew compileJava compileTestJava
      
    - name: Run tests with coverage
      run: ./gradlew test jacocoTestReport
      
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: build/reports/jacoco/test/jacocoTestReport.xml
        fail_ci_if_error: false
        
    - name: Generate build scan
      run: ./gradlew build --scan
      
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          build/reports/
          build/test-results/
          
    - name: Comment test coverage
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = 'build/reports/jacoco/test/html/index.html';
          
          if (fs.existsSync(path)) {
            const coverage = '테스트 커버리지 리포트가 생성되었습니다. 🧪';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `📊 **코드 품질 체크 완료**

${coverage}

- ✅ 컴파일 성공
- ✅ 테스트 실행 완료
- ✅ 커버리지 리포트 생성

자세한 내용은 Artifacts에서 확인할 수 있습니다.`
            });
          }
